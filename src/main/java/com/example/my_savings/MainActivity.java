package com.example.my_savings;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.appcompat.app.AppCompatActivity;import android.content.Intent;import android.os.Bundle;import android.util.Patterns;import android.view.View;import android.widget.Button;import android.widget.EditText;import android.widget.ProgressBar;import android.widget.TextView;import android.widget.Toast;import com.google.android.gms.auth.api.signin.GoogleSignIn;import com.google.android.gms.auth.api.signin.GoogleSignInAccount;import com.google.android.gms.auth.api.signin.GoogleSignInClient;import com.google.android.gms.auth.api.signin.GoogleSignInOptions;import com.google.android.gms.common.SignInButton;import com.google.android.gms.common.api.ApiException;import com.google.android.gms.common.api.GoogleApi;import com.google.android.gms.common.api.GoogleApiClient;import com.google.android.gms.tasks.OnCompleteListener;import com.google.android.gms.tasks.Task;import com.google.firebase.auth.AuthCredential;import com.google.firebase.auth.AuthResult;import com.google.firebase.auth.FirebaseAuth;import com.google.firebase.auth.FirebaseUser;import com.google.firebase.auth.GoogleAuthProvider;import com.google.firebase.database.FirebaseDatabase;public class MainActivity extends AppCompatActivity implements View.OnClickListener {    private TextView register, forgotpassword;    private EditText editTextemail, editTextpassword;    private Button signIn;    private FirebaseAuth mAuth;    SignInButton google_button;    GoogleSignInClient googleSignInClient;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        register = (TextView) findViewById(R.id.activitymain_register_TextView);        register.setOnClickListener(this);        forgotpassword = (TextView) findViewById(R.id.activitymain_forgotpassword_TextView);        forgotpassword.setOnClickListener(this);        signIn = (Button) findViewById(R.id.activitymain_signIn_Button);        signIn.setOnClickListener(this);        editTextemail = (EditText) findViewById(R.id.activitymain_emailadress_EditText);        editTextpassword = (EditText) findViewById(R.id.activitymain_password_EditText);        mAuth = FirebaseAuth.getInstance();        google_button = findViewById(R.id.activitymain_googlebutton_SignInButton);        GoogleSignInOptions googleSignInOptions = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN        ).requestIdToken("1045815913128-3e6vrgkmmpa98ci0ftbasdulfo8ufhbu.apps.googleusercontent.com")                .requestEmail()                .build();        googleSignInClient = GoogleSignIn.getClient(MainActivity.this, googleSignInOptions);        google_button.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Intent intent = googleSignInClient.getSignInIntent();                startActivityForResult(intent,100);            }        });        FirebaseUser firebaseUser = mAuth.getCurrentUser();        if(firebaseUser != null){           startActivity(new Intent(MainActivity.this, MainMenu.class));        }    }    @Override    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {        super.onActivityResult(requestCode, resultCode, data);        if(requestCode==100)        {            Task<GoogleSignInAccount>signInAccountTask = GoogleSignIn.getSignedInAccountFromIntent(data);            if (signInAccountTask.isSuccessful()){                try{                    GoogleSignInAccount googleSignInAccount = signInAccountTask.getResult(ApiException.class);                    if(googleSignInAccount != null)                    {                        AuthCredential authCredential = GoogleAuthProvider.getCredential(googleSignInAccount.getIdToken(), null);                        mAuth.signInWithCredential(authCredential).addOnCompleteListener(this, new OnCompleteListener<AuthResult>() {                            @Override                            public void onComplete(@NonNull Task<AuthResult> task) {                                if(task.isSuccessful()){                                    startActivity(new Intent(MainActivity.this, MainMenu.class));                                    Toast.makeText(MainActivity.this, "Weryfikacja przebiegła pomyślnie", Toast.LENGTH_LONG).show();                                }                                else{                                    Toast.makeText(MainActivity.this, "Błąd uwierzytelniania", Toast.LENGTH_LONG).show();                                }                            }                        });                    }                }                catch (ApiException e){                    e.printStackTrace();                }            }        }    }    @Override    public void onClick(View v) {        switch (v.getId()) {            case R.id.activitymain_register_TextView:                startActivity(new Intent(this, RegisterUser.class));                break;            case R.id.activitymain_signIn_Button:                userLogin();                break;            case R.id.activitymain_forgotpassword_TextView:                startActivity(new Intent(this,ForgotPassword.class));                break;        }    }    private void userLogin() {        String email = editTextemail.getText().toString().trim();        String password = editTextpassword.getText().toString().trim();        if (email.isEmpty()) {            editTextemail.setError("Wprowadź adres e-mail");            editTextemail.requestFocus();            return;        }        if (!Patterns.EMAIL_ADDRESS.matcher(email).matches()) {            editTextemail.setError("Wprowadź poprawny adres e-mail");            editTextemail.requestFocus();            return;        }        if (password.isEmpty()) {            editTextpassword.setError("Wprowadź hasło");            editTextpassword.requestFocus();            return;        }        if(password.length() <6){            editTextpassword.setError("Minimalna długość hasła to 6 znaków");            editTextpassword.requestFocus();            return;        }        mAuth.signInWithEmailAndPassword(email, password).addOnCompleteListener(new OnCompleteListener<AuthResult>(){            @Override            public void onComplete(@NonNull Task<AuthResult> task) {                if(task.isSuccessful())                {                       FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();                       if(user.isEmailVerified())                       {                           startActivity(new Intent(MainActivity.this, MainMenu.class));                       }                       else                       {                           user.sendEmailVerification();                           Toast.makeText(MainActivity.this, "Na twój adres email został wysłany link aktywacyjny. ", Toast.LENGTH_LONG).show();                       }                }                else                    {                        Toast.makeText(MainActivity.this, "Wystąpił błąd logowania, spróbuj jeszcze raz", Toast.LENGTH_LONG).show();                    }           }        });    }}